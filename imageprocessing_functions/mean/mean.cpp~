//Priyanka Hiranandani NIT,Surat
#include <numeric>
#include "opencv2/core/core.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/opencv.hpp"
#include <iostream>
using namespace cv;
using namespace std;
extern "C"
{
#include "api_scilab.h"
#include "Scierror.h"
#include "BOOL.h"
#include <localization.h>
#include<string.h>
#include "../common.h"
int mean(char *fname, unsigned long fname_len)
{

     // Error management variable
        SciErr sciErr;
     // Variables declaration //
	int iRows		= 0;
	int iCols		= 0;
        int piRows		= 0;
	int piCols		= 0;
	int* piAddr		= NULL;
        int* piAddr2            = NULL;
	int* piLen		= NULL;
	char** pstData	        = NULL;
        int * pstData2	        = NULL;
        int* piAddr3            =NULL;
        int* piAddr4            =NULL;
        double *rrows;
        double *rcols;
        double mean=0,mean1;
        unsigned char *pstDataR = NULL;
        unsigned char *pstDataG = NULL;
        unsigned char *pstDataB = NULL;
        int noofitem;
        int t,i,j,k;
    //function to check number of input variable
      //  CheckInputArgument(pvApiCtx, 1, 1);
    //function to check number of output variable
        CheckOutputArgument(pvApiCtx, 1, 1);
    // get Address of first input 
        Mat image=imread("/home/priyanka/kalamsir.jpg");
      //  retrieveImage(image,1);
    //calculating total number of rows and columns
        //block of code for calculating meanimage
       mean1=mean(image,noArray());
       if(image.dims==3)
        {
        cout<<image;
        double r=3*(image.rows)*(image.cols); 
     //   string str=type2str(image.type());
        char *cstr= "8U";
         
         if(!strcmp(cstr,"8U"))
            {   
             
                 for(int i = 0;i <image.rows;i++)
                     {
                     for(int j = 0;j <image.cols;j++)
                           {
                         mean=mean+image.at<cv::Vec3b>(i,j)[0];
                           }
                      }
                for(int i = 0;i <image.rows;i++)
                     {
                     for(int j = 0;j <image.cols;j++)
                           {
                         mean=mean+image.at<cv::Vec3b>(i,j)[1];
                           }
                      }
                for(int i = 0;i <image.rows;i++)
                     {
                     for(int j = 0;j <image.cols;j++)
                           {
                         mean=mean+image.at<cv::Vec3b>(i,j)[2];
                           }
                      }
                

            }
        else if(!strcmp(cstr,"16S"))
            {
                 for(int k=0;k<3;k++)
               {
                 for(int i = 0;i <image.rows;i++)
                     {
                     for(int j = 0;j <image.cols;j++)
                           {
                         mean=mean+image.at<cv::Vec3d>(i,j)[k];
                           }
                      }
                }

            }
        else if(!strcmp(cstr,"16U"))
            {
                 for(int k=0;k<3;k++)
               {
                 for(int i = 0;i <image.rows;i++)
                     {
                     for(int j = 0;j <image.cols;j++)
                           {
                         mean=mean+image.at<cv::Vec3d>(i,j)[k];
                           }
                      }
                }

            }
        else
        {
                 for(int k=0;k<3;k++)
               {
                 for(int i = 0;i <image.rows;i++)
                     {
                     for(int j = 0;j <image.cols;j++)
                           {
                         mean=mean+image.at<cv::Vec3d>(i,j)[k];
                           }
                      }
                }
        }
        
            mean=mean/r;
       }
    //this block of code is for gray scale image
    else if(image.dims==1)     
     { 
        cout<<image;
        string str=type2str(image.type());
        char *cstr = &str[0u];
        //retrive the matrix of pixels as for gray scale image 2 Dimensional matrix is there only  
        double r=(image.rows)*(image.cols);
        //calculating mean 
        if(!strcmp(cstr,"8U"))
            {
              for(int i = 0;i <image.rows;i++)
                     {
                     for(int j = 0;j <image.cols;j++)
                           {
                     
                            mean=mean + (image.at<uchar>(i,j));
                           }
                     }  

            }
        else if(!strcmp(cstr,"16S"))
            {
             for(int i = 0;i <image.rows;i++)
                     {
                     for(int j = 0;j <image.cols;j++)
                           {
                            mean=mean + (image.at<cv::Vec3s>(i,j)[0]);
                           }
                     }  

            }
        else if(!strcmp(cstr,"16U"))
            {
                for(int i = 0;i <image.rows;i++)
                     {
                     for(int j = 0;j <image.cols;j++)
                           {
                            mean=mean + (image.at<cv::Vec3s>(i,j)[0]);
                           }
                      }
            }
        else
            {
               for(int i = 0;i <image.rows;i++)
                     {
                     for(int j = 0;j <image.cols;j++)
                           {
                 
                            mean=mean + (image.at<cv::Vec3d>(i,j)[0]);
                           }
                     }
             }
        
          mean=mean/r;
     }      
    //output argument
    sciErr = createMatrixOfDouble(pvApiCtx, nbInputArgument(pvApiCtx) + 1, 1, 1, &mean1);
    if (sciErr.iErr)
    {
        printError(&sciErr, 0);
        return 0;
    }
      
   
    ////////// Return the output arguments to the Scilab engine //////////

    AssignOutputVariable(pvApiCtx, 1) = nbInputArgument(pvApiCtx) + 1;

    ReturnArguments(pvApiCtx);

    return 0;
}
/* ==================================================================== */
}
